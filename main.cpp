#include <limits>
#include <ctime>
#include <cstdlib>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <iterator>
#include <algorithm>


#include "BSTree.h"

using namespace std;

void manuallyGeneratedGame();

void autoGeneratedGame();

void readFile();

void printIT(int *const *gameField, bool countZero);

void test() {
    auto gameField = new int * [ 2 ];
    for (int i=0; i < 2; i++)
        gameField[i] = new int [2];

    ofstream gameFile;
    gameFile.open ("15-file.txt");
    auto *gameFieldVector = new vector<int>();
    auto *gameFieldVector2 = new vector<int>();

    int number;
    int count=0;
    for (int i = 0; i < 2; i++){
        for(int j=0; j < 2; j++){
            bool exists = true;
            if (count!=3){
                do {
                    do {
                        cout << "Please choose a unique number from 1-4 for the " << i << "," << j << " position\n";
                        cin.clear();
                        cin.ignore(numeric_limits<streamsize>::max(),'\n');
                        cin >> number;

                        for (int ii = 0; ii < 2; ii++){
                            for(int jj=0; jj < 2; jj++){
                                int* currentElement = &(gameField[ii][jj]);
                                if (number >4 || number < 1){
                                    cout << "Value must be between 1-4\n";
                                    exists =true;
                                    break;
                                }
                                if (*currentElement == number){
                                    cout << "Value exists " << *currentElement <<  endl;
                                    exists = true;
                                    break;
                                }else{
                                    exists = false;
                                }
                            }
                            if (exists)
                                break;
                        }
                        gameField[i][j] = number;
                    }while(exists);
                    gameFieldVector->push_back(number);
                }while(cin.fail());
                count++;
            }else{
                gameField[i][j] =0;
                gameFieldVector->push_back(0);
            }
        }
    }
    int countVector=0;
    for (int x:*gameFieldVector){
        cout  << setw(2) << x << " ";
        gameFile << setw(2) << x << " ";
        countVector++;
        if (countVector==2){
            countVector=0;
            cout<<"\n";
            gameFile << "\n";
        }
    }
    gameFile << "\n";
    if (!gameFile.is_open())return;
    gameFile.close();
		
	int j = gameFieldVector->back();
    cout << "This is the zero hopefully " << gameFieldVector->back();

    // Make the nodes
    TreeNode root(gameFieldVector);


    // Make and Print the tree

    BSTree myTree {&root};
//    myTree.Print();

//    int node=0;
//    while(node!=100){
//        cout << "input node value";
//        cin >> node;
//        cin.clear();
//        cin.ignore(numeric_limits<streamsize>::max(),'\n');
//        myTree.Insert(gameFieldVector);
//        myTree.Print();
//    }
    int num=0;
    while(num!=100){
        do{
            cout<<"create one now\n";
            cin >> num;
            gameFieldVector2->push_back(num);
        }while(gameFieldVector2->size() != 4);
        myTree.Insert(gameFieldVector2);
        myTree.Print();
       
		gameFieldVector2->clear();
    }


}

int main () {
    int i;
    cout << "press any key to proceed... ";
    cin >> i;
    int x;
    bool valid=true;
    bool again=true;
    do{
        cout << "\nWhat do you want to do?\n\n";
        do{
            cout << "Choose between\n(1).Manually generating the game\n(2).Auto generating the game\n(3).Read a game from a file\n";
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(),'\n');
            cin >> x;
            if (x==1){
                valid=false;
//                manuallyGeneratedGame();
                test();
            }
            if (x==2){
                valid = false;
                autoGeneratedGame();
            }
            if (x==3){
                valid = false;
                readFile();
            }
        }while(valid);
        cout << "Wanna go again?\n(1).Yes\n(0).No\n";
        cin >> again;
    }while(again);
}

void manuallyGeneratedGame() {
    auto gameField = new int * [ 4 ];
    for (int i=0; i < 4; i++)
        gameField[i] = new int [4];

    vector<int> gameFieldVector;

    bool exportFile;
    ofstream gameFile;

    cout << "Do you want to export your results to a .txt file?\n";

    do{
        cout << "Enter (0) for no and (1) for yes\n";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(),'\n');
        cin >> exportFile;
    }while(cin.fail());
    if(exportFile){
        gameFile.open ("15-file.txt");
    }

    int count=0;
    int number;
    for (int i = 0; i < 4; i++){
        for(int j=0; j < 4; j++){
            bool exists = true;
            if (count!=15){
                do {
                    do {
                        cout << "Please choose a unique number from 1-20 for the " << i << "," << j << " position\n";
                        cin.clear();
                        cin.ignore(numeric_limits<streamsize>::max(),'\n');
                        cin >> number;

                        for (int ii = 0; ii < 4; ii++){
                            for(int jj=0; jj < 4; jj++){
                                int* currentElement = &(gameField[ii][jj]);
                                if (number >20 || number < 1){
                                    cout << "Value must be between 1-20\n";
                                    exists =true;
                                    break;
                                }
                                if (*currentElement == number){
                                    cout << "Value exists " << *currentElement <<  endl;
                                    exists = true;
                                    break;
                                }else{
                                    exists = false;

                                }
                            }
                            if (exists)
                                break;
                        }
                        gameField[i][j] = number;//array
                    }while(exists);
                    gameFieldVector.push_back(number);
                }while(cin.fail());
                count++;
            }else{
                gameField[i][j] =0;
                gameFieldVector.push_back(0);
            }
        }
    }
    int countVector=0;
    for (int x:gameFieldVector){
        cout << "| " << setw(2) << x << " |";
        gameFile << setw(2) << x << " ";
        countVector++;
        if (countVector==4){
            countVector=0;
            cout<<"\n";
            gameFile << "\n";
        }
    }
    gameFile << "\n";
    if (!gameFile.is_open())return;
    gameFile.close();
}

void autoGeneratedGame() {
    int puzzles;
    bool exportFile;
    ofstream gameFile;

    do{
        cout << "How many puzzles do you want?\n";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(),'\n');
        cin >> puzzles;
    }while(cin.fail());

    cout << "Do you want to export your results to a .txt file?\n";

    do{
        cout << "Enter (0) for no and (1) for yes\n";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(),'\n');
        cin >> exportFile;
    }while(cin.fail());
    if(exportFile){
        gameFile.open ("15-file.txt");
    }
    cout << puzzles << ".\n";
    gameFile << puzzles <<"\n";

    srand(time(nullptr));

    auto gameField = new int * [ 4 ];
    for (int i=0; i < 4; i++)
        gameField[i] = new int [4];

    for (int p = 0; p < puzzles; p++){
        cout << p+1 <<".\n";

        int count=0;
        for (int i = 0; i < 4; i++){
            for(int j=0; j < 4; j++){
                bool exists = true;
                if (count!=15){
                    do {
                        do {
                            int randomval = rand() % 20;

                            cin.clear();

                            for (int ii = 0; ii < 4; ii++){
                                for(int jj=0; jj < 4; jj++){
                                    int* currentElement = &(gameField[ii][jj]);
                                    if (randomval >20 || randomval < 1){
                                        exists =true;
                                        break;
                                    }
                                    if (*currentElement == randomval){
                                        exists = true;
                                        break;
                                    }else{
                                        exists = false;
                                    }
                                }
                                if (exists)
                                    break;
                            }
                            gameField[i][j] = randomval;
                        }while(exists);
                    }while(cin.fail());
                    count++;
                }else{
                    gameField[i][j] =0;
                }
            }
        }

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                cout << "| " << setw(2) << gameField[i][j] << " |";
                gameFile << setw(2) << gameField[i][j] << " ";
            }
            cout << "\n";
            gameFile << "\n";
        }
        gameFile << "\n";
    }
    if (!gameFile.is_open())return;
    gameFile.close();
}

void readFile() {
    auto gameField = new int * [ 4 ];
    for (int i=0; i < 4; i++)
        gameField[i] = new int [4];

    vector<int> gameFieldVector;

    string x;
    string line;
    ifstream gameFile ("15-file.txt");

    int countRow=0;
    int countCol=0;

    int o;

    bool countZero;

    cout << "Do you want to count the empty block in a continuous line?\n";
    do{
        cout << "Enter (0) for no and (1) for yes\n";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(),'\n');
        cin >> countZero;
    }while(cin.fail());

    if (gameFile.is_open()){
        while ( getline (gameFile,line) ){
            for(int j = 0; j < line.length(); j++){
                if (line.length() == 12) {
                    x = line[j];
                    if (j > 0) {
                        if (line[j] != ' ' && line[j - 1] != ' ') {
                            o = stoi(line[j - 1] + x);
                            gameField[countRow][countCol] = o;
                            gameFieldVector.push_back(o);
                            if (countCol == 3) {
                                countCol = 0;
                            } else {
                                countCol++;
                            }
                        }
                        if (line[j] != ' ' && line[j + 1] == ' ' && line[j - 1] == ' ') {
                            o = stoi(x);
                            gameField[countRow][countCol] = o;
                            gameFieldVector.push_back(o);
                            if (countCol == 3) {
                                countCol = 0;
                            } else {
                                countCol++;
                            }
                        }
                    }
                }
            }

            if (line.length() == 0){
                printIT(gameField, countZero);
//                            int countVector=0;
//                            for (int p:gameFieldVector){
//                                cout << setw(2) << p << " ";
//                                countVector++;
//                                if (countVector==4){
//                                    countVector=0;
//                                    cout<<"\n";
//                                }
//                            }
//                            cout << "\n";
//                            for (int p :gameFieldVector){
//                                gameFieldVector.pop_back();
//                            }
            }

            if (line.length() == 12) {
                if (countRow == 3) {
                    countRow = 0;
                } else {
                    countRow++;
                }
            }
        }
        gameFile.close();
    } else cout << "Unable to open file";
}

void printIT(int *const *gameField, bool countZero) {

    int continueRow=0;
    int continueCol=0;
    int reverseRow=0;
    int reverseCol=0;
    for (int i = 0; i < 4; i++) {
        int continueRowCount=0;
        int reverseRowCount=0;
        for (int p = 0; p < 4; p++) {
            cout << setw(2) << gameField[i][p]<< " ";

            if (gameField[i][p]+1 == gameField[i][p+1]){
                continueRowCount++;
            }
            if (continueRowCount == 3){
                continueRowCount = 0;
                continueRow++;
            }
            if (i == 0 && (gameField[0][p] + 1 == gameField[0 + 1][p]) &&
                (gameField[0][p] + 2 == gameField[0 + 2][p]) && (gameField[0][p] + 3 == gameField[0 + 3][p])) {
                continueCol++;
            }
            if (gameField[i][p]-1 == gameField[i][p+1]){
                reverseRowCount++;
            }
            if (reverseRowCount == 3){
                reverseRowCount = 0;
                reverseRow++;
            }
            if (i == 0 && (gameField[0][p] - 1 == gameField[0 + 1][p]) &&
                (gameField[0][p] - 2 == gameField[0 + 2][p]) && (gameField[0][p] - 3 == gameField[0 + 3][p])) {
                reverseCol++;
            }

            if (countZero){ // for counting the line with 0 as well
                if (continueRowCount == 2 && gameField[i][p + 1] == 0) {
                    continueRow++;
                }
                if (i == 0 && gameField[0 + 3][p] == 0 &&
                    ((gameField[0][p] + 1 == gameField[0 + 1][p]) && (gameField[0][p] + 2 == gameField[0 + 2][p]))) {
                    continueCol++;
                }
                if (reverseRowCount == 2 && gameField[i][p + 1] == 0) {
                    reverseRow++;
                }
                if (i == 0 && gameField[0 + 3][p] == 0 &&
                    ((gameField[0][p] - 1 == gameField[0 + 1][p]) && (gameField[0][p] - 2 == gameField[0 + 2][p]))) {
                    reverseCol++;
                }
            }
        }
        cout << "\n";
    }
    cout <<"row = " << continueRow <<"\n"
           "column = " << continueCol << "\n"
           "reverse row = "<< reverseRow << "\n"
           "reverse column = " << reverseCol << "\n\n";
}
