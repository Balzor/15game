#include <limits>
#include <ctime>
#include <cstdlib>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <iterator>
#include <algorithm>

#include "Puzzles.h"

using namespace std;

void autoGeneratedGame();

void readFile();

void printIT(int *const *gameField, bool countZero);

void buildStorage(vector<vector<int>>& zeroStorage,vector<size_t>& storage,int size,const vector<int> &gameFieldVector);

size_t zeroPosition(const vector<int> &gameFieldVector);

int findContinuities(int size, const vector<vector<int>> &zeroStorage, bool countZeroo,string& solution);

void test() {
    bool exportFile;
    bool exportSolution;
    ofstream gameFile;
    ofstream solutionFile;

    string solution;

    do{
        cout << "Do you want to create a 15-file.txt file?\n";
        cout << "Enter (0) for no and (1) for yes\n";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(),'\n');
        cin >> exportFile;
    }while(cin.fail());
    if(exportFile){
        gameFile.open ("15-file.txt");
    }
    do{
        cout << "Do you want to create a solution file?\n";
        cout << "Enter (0) for no and (1) for yes\n";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(),'\n');
        cin >> exportSolution;
    }while(cin.fail());
    if(exportSolution){
        solutionFile.open ("Solution-file.txt");
    }

    int size;
    do{
        cout << "set the size of the puzzle\n";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(),'\n');
        cin >> size;
    }while(cin.fail());

    bool repeat;
    do{
        cout << "Do you want repeat numbers\n(1).Yes\n(0).No\n";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(),'\n');
        cin >> repeat;
    }while(cin.fail());

    vector<int> gameFieldVector;
    vector<size_t> storage;
    vector<vector<int>> zeroStorage;

    int number;

    for (int i = 0; i < size*size-1; i++){
        bool exists = true;
        do{
            do {
                cout << "Please choose a unique number from 1-"<<size*size+size<<" for the "<< i  << " position.(if you have no repeat ON)\n";
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(),'\n');
                cin >> number;

                if(repeat){
                    gameFieldVector.push_back(number);
                    exists=false;
                }else{
                    if (number <= (size*size+size) && number >= 1){
                        if(std::find(gameFieldVector.begin(), gameFieldVector.end(),number)!=gameFieldVector.end()){
                            cout<<"Number "<<number << " already exists.\n";
                        }else{
                            gameFieldVector.push_back(number);
                            exists=false;
                        }
                    }else{
                        cout<<"Number must be between "<<size*size+size << " and 1.\n";
                        exists = true;
                    }
                }
            }while(exists);
        }while(cin.fail());
    }
    gameFieldVector.push_back(0);

    int countVector=0;
    for (int x:gameFieldVector){
        cout << "| " << setw(2) << x << " |";
        gameFile << setw(2) << x << " ";
        solutionFile << setw(2) << x << " ";
        countVector++;
        if (countVector==size){
            countVector=0;
            cout<<"\n";
            gameFile << "\n";
            solutionFile << "\n";
        }
    }
    gameFile << "\n";

    size_t g = TreeNode::hash(gameFieldVector);
    storage.push_back(g);

    zeroStorage.push_back(gameFieldVector);

    bool countZeroo=true;
    bool continuities;
    do{
        cout<<"Do you want to see all possible continuities from this state? if no you will see the continuities of this state only\n(1).Yes\n(0).No\n";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(),'\n');
        cin>>continuities;
    }while(cin.fail());

    do{
        cout<<"Do you want to count the empty as a continuity?\n(1).Yes\n(0).No\n";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(),'\n');
        cin>>countZeroo;
    }while(cin.fail());

    if (continuities){
        buildStorage(zeroStorage,storage,size,gameFieldVector);
    }
    int countMoves = findContinuities(size, zeroStorage, countZeroo,solution);
    cout<< solution;
    solutionFile << solution;
    cout<< "There are " <<countMoves << " possible turns\n";
    gameFieldVector.clear();

    if (!gameFile.is_open())return;
    gameFile.close();
    if (!solutionFile.is_open())return;
    solutionFile.close();

}

int findContinuities(int size, const vector<vector<int>> &zeroStorage, bool countZeroo,string& solution) {
    int countMoves=0;
    int continueRow=0;
    int continueCol=0;
    int reverseRow=0;
    int reverseCol=0;
    for (const vector<int>& o:zeroStorage){
        countMoves++;
        int continueRowCount=0;
        int reverseRowCount=0;
        int continueColCount =0;
        int reverseColCount =0;
        int counting=0;
        for (int i = 0; i < size*size-1; i++) {
            if (counting < size-1) {
                if (o[i] + 1 == o[i + 1]) {
                    continueRowCount++;
                }
                if (o[i] - 1 == o[i + 1]) {
                    reverseRowCount++;
                }
            }
            if (continueRowCount == size-1){
                continueRowCount = 0;
                continueRow++;
            }
            if (reverseRowCount == size-1){
                reverseRowCount = 0;
                reverseRow++;
            }

            if(i<=((size*size)-size-1)){
                if(o[i]+1==o[i+size]){
                    continueColCount++;
                }
                if(o[i]-1==o[i+size]){
                    reverseColCount++;
                }
            }

            if (continueColCount == size-1){
                continueColCount = 0;
                continueCol++;
            }
            if (reverseColCount == size-1){
                reverseColCount = 0;
                reverseCol++;
            }

            if (countZeroo){ // for counting the line with 0 as well
                if ((continueRowCount == (size-2)) && (o[i + 1] == 0)) {
                    continueRow++;
                }
                if ((reverseRowCount == (size-2)) && (o[i + 1] == 0)) {
                    reverseRow++;
                }
                if(i<=((size*size)-size-1)){
                    if((reverseColCount == (size-2)) && o[i+size]==0){
                        reverseCol++;
                    }
                    if((continueColCount == (size-2)) && o[i+size]==0){
                        continueCol++;
                    }
                }
            }

            counting++;
            if (counting==size){
                 continueRowCount=0;
                 reverseRowCount=0;
//                 continueColCount =0;
//                 reverseColCount=0;
                 counting=0;
            }

        }
    }
    solution = "row = " + to_string(continueRow) +"\n"
              "column = " + to_string(continueCol) + "\n"
            "reverse row = "+ to_string(reverseRow) + "\n"
             "reverse column = " + to_string(reverseCol) + "\n\n";
    return countMoves;
}

size_t zeroPosition(const vector<int> &gameFieldVector) {
    for (size_t i=0; i < gameFieldVector.size(); i++)
        if (gameFieldVector.at(i)==0)
            return i;
    return 0;
}

void buildStorage(vector<vector<int>>& zeroStorage, vector<size_t>& storage, int size, const vector<int> &gameFieldVector){
    size_t position = zeroPosition(gameFieldVector);

    if(position % size > 0){
        //left
        vector<int> gameFieldLeft = gameFieldVector;
        iter_swap(gameFieldLeft.begin() + position, gameFieldLeft.begin() + (position-1));
        size_t hashedLeft = TreeNode::hash(gameFieldLeft);
        if (!(std::find(storage.begin(), storage.end(), hashedLeft) != storage.end())) {
            storage.push_back(hashedLeft);
            if(zeroPosition(gameFieldLeft) == size*size-1)
                zeroStorage.push_back(gameFieldLeft);
            buildStorage(zeroStorage, storage, size, gameFieldLeft);
        }
    }
    if (position % size != (size-1) ) {
        //go right
        vector<int> gameFieldRight = gameFieldVector;
        iter_swap(gameFieldRight.begin() + position, gameFieldRight.begin() + (position+1));
        size_t hashedRight = TreeNode::hash(gameFieldRight);
        if (!(std::find(storage.begin(), storage.end(), hashedRight) != storage.end())) {
            storage.push_back(hashedRight);
            if(zeroPosition(gameFieldRight) == size*size-1)
                zeroStorage.push_back(gameFieldRight);
            buildStorage(zeroStorage, storage, size, gameFieldRight);
        }
    }
    if (position > (size-1)) {
        //go up
        vector<int> gameFieldUp = gameFieldVector;
        iter_swap(gameFieldUp.begin() + position, gameFieldUp.begin() + (position-size));
        size_t hashedUp = TreeNode::hash(gameFieldUp);
        if (!(std::find(storage.begin(), storage.end(), hashedUp) != storage.end())) {
            storage.push_back(hashedUp);
            if(zeroPosition(gameFieldUp) == size*size-1)
                zeroStorage.push_back(gameFieldUp);
            buildStorage(zeroStorage, storage, size, gameFieldUp);
        }
    }
    if (position < (size*size-size)) {
        //go down
        vector<int> gameFieldDown = gameFieldVector;
        iter_swap(gameFieldDown.begin() + position, gameFieldDown.begin() + (position+size));
        size_t hashedDown = TreeNode::hash(gameFieldDown);
        if (!(std::find(storage.begin(), storage.end(), hashedDown) != storage.end())) {
            storage.push_back(hashedDown);
            if(zeroPosition(gameFieldDown) == size*size-1)
                zeroStorage.push_back(gameFieldDown);
            buildStorage(zeroStorage, storage, size, gameFieldDown);
        }
    }
}

int main () {
    int x=0;
    bool valid=true;
    bool again=true;
    do{
        cout << "\nWhat do you want to do?\n\n";
        do{
            cout << "Choose between\n(1).Manually generating the game\n(2).Auto generating the game\n(3).Read a game from a file\n";

            cin >> x;
            if (!cin.good()) {
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                continue;
            }

            if (x==1){
                valid=false;
                test();
            }
            if (x==2){
                valid = false;
                autoGeneratedGame();
            }
            if (x==3){
                valid = false;
                readFile();
            }
        }while(valid);
        do{
            cout << "Wanna go again?\n(1).Yes\n(0).No\n";
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cin >> again;
        }while(cin.fail());
    }while(again);
}

void autoGeneratedGame() {
    string solution;
    int existsStorage=0;
    int size;
    do{
        cout << "set the size of the puzzles\n";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(),'\n');
        cin >> size;
    }while(cin.fail());

    int puzzles;
    bool exportFile;
    bool exportSolution;
    ofstream gameFile;
    ofstream solutionFile;

    vector<int> gameFieldVector;
    vector<size_t> storage;
    vector<vector<int>> zeroStorage;

    do{
        cout << "How many puzzles do you want?\n";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(),'\n');
        cin >> puzzles;
    }while(cin.fail());

    do{
        cout << "Do you want to create a 15-file.txt file?\n";
        cout << "Enter (0) for no and (1) for yes\n";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(),'\n');
        cin >> exportFile;
    }while(cin.fail());
    if(exportFile){
        gameFile.open ("15-file.txt");
    }
    do{
        cout << "Do you want to create a solution file?\n";
        cout << "Enter (0) for no and (1) for yes\n";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(),'\n');
        cin >> exportSolution;
    }while(cin.fail());
    if(exportSolution){
        solutionFile.open ("Solution-file.txt");
    }

    cout << puzzles << ".\n";
    gameFile << puzzles <<"\n";
    solutionFile<<puzzles<<"\n";

    bool repeat;
    do{
        cout << "Do you want repeat numbers\n(1).Yes\n(0).No\n";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(),'\n');
        cin >> repeat;
    }while(cin.fail());

    bool countZeroo=true;
    bool continuities;
    do{
        cout<<"Do you want to see all possible continuities from these states? if no you will see the continuities of their first state only\n(1).Yes\n(0).No\n";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(),'\n');
        cin>>continuities;
    }while(cin.fail());

    do{
        cout<<"Do you want to count the empty as a continuity?\n(1).Yes\n(0).No\n";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(),'\n');
        cin>>countZeroo;
    }while(cin.fail());


    srand(time(nullptr));

    for (int p = 0; p < puzzles; p++){
        cout << p+1 <<".\n";
        for (int i = 0; i < size*size-1; i++){
            bool exists = true;
            do {
                int randomval = rand() % (size*size+size);

                if (repeat){
                    if (randomval>=1){
                        gameFieldVector.push_back(randomval);
                        exists=false;
                    }else   exists=true;
                }else{
                    if (randomval <= (size*size+size) && randomval >= 1){
                        if(std::find(gameFieldVector.begin(), gameFieldVector.end(),randomval)!=gameFieldVector.end()){
                        }else{
                            gameFieldVector.push_back(randomval);
                            exists=false;
                        }
                    }else exists = true;
                }
            }while(exists);
        }
        gameFieldVector.push_back(0);
        int countVector=0;
        for (int x:gameFieldVector){
            cout << "| " << setw(2) << x << " |";
            gameFile << setw(2) << x << " ";
            solutionFile << setw(2) << x << " ";
            countVector++;
            if (countVector==size){
                countVector=0;
                cout<<"\n";
                gameFile << "\n";
                solutionFile << "\n";
            }
        }
        gameFile << "\n";

        size_t x = TreeNode::hash(gameFieldVector);

        if (std::find(storage.begin(), storage.end(),x)!=storage.end()){
            cout<<"in\n";
            existsStorage++;
        }
        storage.push_back(x);

        zeroStorage.push_back(gameFieldVector);

        if (continuities){
            buildStorage(zeroStorage,storage,size,gameFieldVector);
        }

        int countMoves = findContinuities(size, zeroStorage, countZeroo,solution);
        cout<<solution;
        solutionFile<<solution;
        cout<< "There are " <<countMoves << " possible turns\n";

        gameFieldVector.clear();
        zeroStorage.clear();
    }
    if (!gameFile.is_open())return;
    gameFile.close();
    if (!solutionFile.is_open())return;
    solutionFile.close();

    cout<< "\n" <<existsStorage<< " duplications\n";
}

void readFile() {
    auto gameField = new int * [ 4 ];
    for (int i=0; i < 4; i++)
        gameField[i] = new int [4]{0};

    vector<int> gameFieldVector;

    string x;
    string line;
    ifstream gameFile ("15-file.txt");

    int countRow=0;
    int countCol=0;

    int o;

    bool countZero;

    do{
        cout << "Do you want to count the empty block in a continuous line?\n";
        cout << "Enter (0) for no and (1) for yes\n";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(),'\n');
        cin >> countZero;
    }while(cin.fail());

    if (gameFile.is_open()){
        while ( getline (gameFile,line) ){
            for(int j = 0; j < line.length(); j++){
                if (line.length() == 12) {
                    x = line[j];
                    if (j > 0) {
                        if (line[j] != ' ' && line[j - 1] != ' ') {
                            o = stoi(line[j - 1] + x);
                            gameField[countRow][countCol] = o;
                            gameFieldVector.push_back(o);
                            if (countCol == 3) {
                                countCol = 0;
                            } else {
                                countCol++;
                            }
                        }
                        if (line[j] != ' ' && line[j + 1] == ' ' && line[j - 1] == ' ') {
                            o = stoi(x);
                            gameField[countRow][countCol] = o;
                            gameFieldVector.push_back(o);
                            if (countCol == 3) {
                                countCol = 0;
                            } else {
                                countCol++;
                            }
                        }
                    }
                }
            }

            if (line.length() == 0){
                printIT(gameField, countZero);
            }

            if (line.length() == 12) {
                if (countRow == 3) {
                    countRow = 0;
                } else {
                    countRow++;
                }
            }
        }
        gameFile.close();
    } else cout << "Unable to open file";
	for (int i = 0; i < 4; i++) {
		delete[] gameField[i];
	}
	delete[] gameField;
}

void printIT(int *const *gameField, bool countZero) {

    int continueRow=0;
    int continueCol=0;
    int reverseRow=0;
    int reverseCol=0;
    for (int i = 0; i < 4; i++) {
        int continueRowCount=0;
        int reverseRowCount=0;
        for (int p = 0; p < 4; p++) {
            cout << setw(2) << gameField[i][p]<< " ";

            if (gameField[i][p]+1 == gameField[i][p+1]){
                continueRowCount++;
            }
            if (continueRowCount == 3){
                continueRowCount = 0;
                continueRow++;
            }
            if (i == 0 && (gameField[0][p] + 1 == gameField[0 + 1][p]) &&
                (gameField[0][p] + 2 == gameField[0 + 2][p]) && (gameField[0][p] + 3 == gameField[0 + 3][p])) {
                continueCol++;
            }
            if (gameField[i][p]-1 == gameField[i][p+1]){
                reverseRowCount++;
            }
            if (reverseRowCount == 3){
                reverseRowCount = 0;
                reverseRow++;
            }
            if (i == 0 && (gameField[0][p] - 1 == gameField[0 + 1][p]) &&
                (gameField[0][p] - 2 == gameField[0 + 2][p]) && (gameField[0][p] - 3 == gameField[0 + 3][p])) {
                reverseCol++;
            }

            if (countZero){ // for counting the line with 0 as well
                if (continueRowCount == 2 && gameField[i][p + 1] == 0) {
                    continueRow++;
                }
                if (i == 0 && gameField[0 + 3][p] == 0 &&
                    ((gameField[0][p] + 1 == gameField[0 + 1][p]) && (gameField[0][p] + 2 == gameField[0 + 2][p]))) {
                    continueCol++;
                }
                if (reverseRowCount == 2 && gameField[i][p + 1] == 0) {
                    reverseRow++;
                }
                if (i == 0 && gameField[0 + 3][p] == 0 &&
                    ((gameField[0][p] - 1 == gameField[0 + 1][p]) && (gameField[0][p] - 2 == gameField[0 + 2][p]))) {
                    reverseCol++;
                }
            }
        }
        cout << "\n";
    }
    cout <<"row = " << continueRow <<"\n"
           "column = " << continueCol << "\n"
           "reverse row = "<< reverseRow << "\n"
           "reverse column = " << reverseCol << "\n\n";
}
